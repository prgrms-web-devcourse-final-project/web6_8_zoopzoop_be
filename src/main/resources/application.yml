spring:
  application:
    name: back
  profiles:
    active: dev
  output:
    ansi:
      enabled: always
  datasource:
    hikari:
      auto-commit: false
  jackson:
    serialization:
      fail-on-empty-beans: false
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
  config:
    import: optional:classpath:application-secrets.yml
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  ai:
    openai:
      base-url: https://api.groq.com/openai # 내부 서버를 groq으로
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: meta-llama/llama-4-scout-17b-16e-instruct
          temperature: 0
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: 5672
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 2000
          max-attempts: 3
  data: #RedisTemplate 등을 사용하기 위한 직접 연결용
    redis:
      host: localhost
      port: 6379
      timeout: 6000
      password: ${redis-password}
  cache: #Spring Cache를 사용하기 위한 Redis
    type: redis
    redis:
      time-to-live: 300000
      cache-null-values: false
      key-prefix:

springdoc:
  default-produces-media-type: application/json;charset=UTF-8
logging:
  level:
    org.hibernate.orm.jdbc.bind: TRACE
    org.hibernate.orm.jdbc.extract: TRACE
    org.springframework.transaction.interceptor: TRACE
    com.back: DEBUG
    org.springframework.retry: DEBUG

server:
  port: 8080

app:
  seed:
    enabled: true

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always

sentry: #Sentry 모니터렁 기본 설정.
  dsn: ${sentry-dsn}

jwt:
  secret-key: ${JWT_SECRET_KEY}
  access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY}
  refresh-token-validity: ${JWT_REFRESH_TOKEN_VALIDITY}

