spring:
  #DB 설정
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update

  #OAuth 설정
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${OAUTH_KAKAO_CLIENT_ID}
            client-secret: ${OAUTH_KAKAO_CLIENT_SECRET}
            redirect-uri: ${OAUTH_KAKAO_REDIRECT_URI}
            scope:
              -profile_nickname
              -profile_image
            authorization-grant-type: authorization_code
          google:
            client-id: ${OAUTH_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH_GOOGLE_CLIENT_SECRET}
            redirect-uri: ${OAUTH_GOOGLE_REDIRECT_URI}
            scope:
              - profile
            authorization-grant-type: authorization_code
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

  #AWS 설정
  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      region:
        static: ${AWS_REGION}
      s3:
        bucket: ${AWS_S3_BUCKET_NAME}
      stack:
        auto: false

  #Redis 설정
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      timeout: 6000

  cache:
    type: redis
    redis:
      time-to-live: 300000
      cache-null-values: false

# Naver API
naver:
  client_id: ${NAVER_CLIENT_ID}
  client_secret: ${NAVER_CLIENT_SECRET}

# JWT
jwt:
  secret-key: ${JWT_SECRET_KEY}
  access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY}
  refresh-token-validity: ${JWT_REFRESH_TOKEN_VALIDITY}

#Frontend
front:
  redirect-domain: ${FRONT_REDIRECT_DOMAIN}

# Liveblocks
liveblocks:
  secret-key: ${LIVEBLOCKS_SECRET_KEY}

# App 설정
app:
  seed:
    enabled: true

#Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always

#Sentry
sentry:
  dsn: ${SENTRY_DSN}
  # Add data like request headers and IP for users,
  # see https://docs.sentry.io/platforms/java/guides/spring-boot/data-management/data-collected/ for more info
  send-default-pii: true
  environment: prod
  traces-sample-rate: 0.2
