name: Spring CD

on:
  workflow_run:
    workflows: ["Spring CI develop"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Environment based on Branch
        run: |
          BRANCH=${{ github.event.workflow_run.head_branch }}
          echo "Branch: $BRANCH"

          if [ "$BRANCH" = "develop" ]; then
            ENV="test"
            SERVER_HOST=${{ secrets.TEST_SERVER_HOST }}
            DB_URL=${{ secrets.TEST_DB_URL }}
            DB_USERNAME=${{ secrets.TEST_DB_USERNAME }}
            DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}
          elif [ "$BRANCH" = "main" ]; then
            ENV="prod"
            SERVER_HOST=${{ secrets.PROD_SERVER_HOST }}
            DB_URL=${{ secrets.PROD_DB_URL }}
            DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
            DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

          echo "Deploying to $ENV at $SERVER_HOST"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ steps.set-env.outputs.SERVER_HOST || secrets.TEST_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            IMAGE=ghcr.io/${{ github.repository }}/zoopzoop:latest
            BLUE_PORT=8081
            GREEN_PORT=8082
            BLUE=zoopzoop-blue
            GREEN=zoopzoop-green

            if grep -q "$BLUE_PORT" /etc/nginx/nginx.conf; then
              CURRENT=$BLUE
              CURRENT_PORT=$BLUE_PORT
              NEXT=$GREEN
              NEXT_PORT=$GREEN_PORT
            else
              CURRENT=$GREEN
              CURRENT_PORT=$GREEN_PORT
              NEXT=$BLUE
              NEXT_PORT=$BLUE_PORT
            fi

            echo "Current live: $CURRENT ($CURRENT_PORT)"
            echo "Next to deploy: $NEXT ($NEXT_PORT)"

            docker pull $IMAGE
            docker run -d --name $NEXT --rm \
              -e SPRING_DATASOURCE_URL=$DB_URL \
              -e SPRING_DATASOURCE_USERNAME=$DB_USERNAME \
              -e SPRING_DATASOURCE_PASSWORD=$DB_PASSWORD \
              -p $NEXT_PORT:8080 $IMAGE

            # Health check
            for i in {1..30}; do
              if curl -s http://127.0.0.1:$NEXT_PORT/actuator/health | grep '"status":"UP"' > /dev/null; then
                echo "✅ $NEXT is healthy!"
                break
              fi
              echo "⏳ Waiting... ($i/30)"
              sleep 2
              if [ $i -eq 30 ]; then
                echo "❌ Health check failed. Rolling back..."
                docker stop $NEXT
                exit 1
              fi
            done

            # Nginx 포트 스위칭
            sed -i "s/$CURRENT_PORT/$NEXT_PORT/g" /etc/nginx/nginx.conf
            nginx -s reload
            echo "✅ Switched Nginx to $NEXT ($NEXT_PORT)"

            # 이전 버전 종료
            if [ "$(docker ps -q -f name=$CURRENT)" ]; then
              docker stop $CURRENT
            fi

            echo "✅ Deployment to $ENV completed successfully!"
