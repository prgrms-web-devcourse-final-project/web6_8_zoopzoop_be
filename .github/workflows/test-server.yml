# ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïù¥Î¶Ñ
name: Spring CI/CD Pipeline (Develop)

# develop Î∏åÎûúÏπò PRÏóêÏÑúÎßå Ïã§Ìñâ
on:
  pull_request:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'build.gradle*'
      - 'settings.gradle*'
      - 'gradle/**'
      - 'Dockerfile'
      - '.github/workflows/**'

jobs:
  # ==================================
  # CI: Test and Build and Push Docker Image
  # ==================================
  ci:
    runs-on: ubuntu-latest

    steps:
      # 1. ÏÜåÏä§ ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 21 ÏÑ§Ïπò
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle Ï∫êÏãú ÏÑ§Ï†ï
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. gradlew Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. application-secrets.yml ÏÉùÏÑ±
      - name: Generate application-secrets.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_SECRET_YML }}" > src/main/resources/application-secrets.yml
          echo "OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}" >> src/main/resources/application-secrets.yml

      # 6. Gradle ÌÖåÏä§Ìä∏ Ïã§Ìñâ
      - name: Test with Gradle
        run: ./gradlew test

      # 7. ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•
      - name: Show test results
        run: |
          echo "==== Test Results ===="
          if compgen -G "build/test-results/test/TEST-*.xml" > /dev/null; then
            total=$(grep '<testcase ' build/test-results/test/TEST-*.xml | wc -l)
            failed=$(grep -h '<failure' build/test-results/test/TEST-*.xml | wc -l)
            error=$(grep -h '<error' build/test-results/test/TEST-*.xml | wc -l)
            passed=$((total - failed - error))
            echo "Total tests: $total"
            echo "Passed tests: $passed"
            echo "Failed tests: $failed"
            echo "Errored tests: $error"
          else
            echo "No test results found."
          fi

      # 8. Gradle ÎπåÎìú Ïã§Ìñâ (ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ Ïãú)
      - name: Build with Gradle
        run: ./gradlew build

      # 9. GHCR Î°úÍ∑∏Ïù∏
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 10. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú & Ìë∏Ïãú
      - name: Build & Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/zoopzoop
          
          docker build -t $IMAGE_NAME:${GITHUB_SHA} . 
          docker tag $IMAGE_NAME:${GITHUB_SHA} $IMAGE_NAME:latest
          
          docker push $IMAGE_NAME:${GITHUB_SHA}
          docker push $IMAGE_NAME:latest

  # ==================================
  # CD: Deploy to Test Environment
  # ==================================
  cd-test:
    runs-on: ubuntu-latest
    needs: ci  # CIÍ∞Ä ÏÑ±Í≥µÌïú ÌõÑÏóêÎßå Ïã§Ìñâ

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Test Environment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            # ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
            DB_URL="${{ secrets.TEST_DB_URL }}"
            DB_USERNAME="${{ secrets.TEST_DB_USERNAME }}"
            DB_PASSWORD="${{ secrets.TEST_DB_PASSWORD }}"

            echo "üöÄ Starting deployment to TEST environment"

            IMAGE=ghcr.io/${{ github.repository }}/zoopzoop:latest
            BLUE_PORT=8081
            GREEN_PORT=8082
            BLUE=zoopzoop-blue
            GREEN=zoopzoop-green

            # Blue-Green Î∞∞Ìè¨ Î°úÏßÅ
            if sudo grep -q "$BLUE_PORT" /etc/nginx/nginx.conf; then
              CURRENT=$BLUE
              CURRENT_PORT=$BLUE_PORT
              NEXT=$GREEN
              NEXT_PORT=$GREEN_PORT
            else
              CURRENT=$GREEN
              CURRENT_PORT=$GREEN_PORT
              NEXT=$BLUE
              NEXT_PORT=$BLUE_PORT
            fi

            echo "Current live: $CURRENT ($CURRENT_PORT)"
            echo "Next to deploy: $NEXT ($NEXT_PORT)"

            # Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
            if [ "$(docker ps -q -f name=$NEXT)" ]; then
              docker stop $NEXT
            fi
            if [ "$(docker ps -aq -f name=$NEXT)" ]; then
              docker rm $NEXT
            fi

            # ÏÉà Ïù¥ÎØ∏ÏßÄ pull Î∞è Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
            sudo docker pull $IMAGE
            sudo docker run -d --name $NEXT \
              -e SPRING_DATASOURCE_URL="$DB_URL" \
              -e SPRING_DATASOURCE_USERNAME="$DB_USERNAME" \
              -e SPRING_DATASOURCE_PASSWORD="$DB_PASSWORD" \
              -p $NEXT_PORT:8080 $IMAGE || { echo "Docker run failed!"; sudo docker logs $NEXT; exit 1; }

            # Health check
            for i in {1..30}; do
              if curl -s http://127.0.0.1:$NEXT_PORT/actuator/health | grep '"status":"UP"' > /dev/null; then
                echo "‚úÖ $NEXT is healthy!"
                break
              fi
              echo "‚è≥ Waiting... ($i/30)"
              sleep 2
              if [ $i -eq 30 ]; then
                echo "‚ùå Health check failed. Rolling back..."
                docker stop $NEXT
                docker rm $NEXT
                exit 1
              fi
            done

            # Nginx ÏÑ§Ï†ï Î≥ÄÍ≤Ω
            sudo sed -i "s/$CURRENT_PORT/$NEXT_PORT/g" /etc/nginx/nginx.conf
            sudo nginx -s reload
            echo "‚úÖ Switched Nginx to $NEXT ($NEXT_PORT)"

            # Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
            if [ "$(docker ps -q -f name=$CURRENT)" ]; then
              docker stop $CURRENT
              docker rm $CURRENT
            fi

            echo "üéâ Deployment to TEST environment completed!"