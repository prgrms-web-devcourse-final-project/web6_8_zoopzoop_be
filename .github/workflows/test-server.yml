# 워크플로우 이름
name: Spring CI/CD Pipeline (Develop)

# develop 브랜치 PR에서만 실행
on:
  pull_request:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'build.gradle*'
      - 'settings.gradle*'
      - 'gradle/**'
      - 'Dockerfile'
      - '.github/workflows/**'

jobs:
  # ==================================
  # CI: Test and Build and Push Docker Image
  # ==================================
  ci:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. application-secrets.yml 생성
      - name: Generate application-secrets.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_SECRET_YML }}" > src/main/resources/application-secrets.yml
          echo "OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}" >> src/main/resources/application-secrets.yml

      # 6. Gradle 테스트 실행
      - name: Test with Gradle
        run: ./gradlew test

      # 7. 테스트 결과 요약 출력
      - name: Show test results
        run: |
          echo "==== Test Results ===="
          if compgen -G "build/test-results/test/TEST-*.xml" > /dev/null; then
            total=$(grep '<testcase ' build/test-results/test/TEST-*.xml | wc -l)
            failed=$(grep -h '<failure' build/test-results/test/TEST-*.xml | wc -l)
            error=$(grep -h '<error' build/test-results/test/TEST-*.xml | wc -l)
            passed=$((total - failed - error))
            echo "Total tests: $total"
            echo "Passed tests: $passed"
            echo "Failed tests: $failed"
            echo "Errored tests: $error"
          else
            echo "No test results found."
          fi

      # 8. Gradle 빌드 실행 (테스트 성공 시)
      - name: Build with Gradle
        run: ./gradlew build

      # 9. GHCR 로그인
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 10. Docker 이미지 빌드 & 푸시
      - name: Build & Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/zoopzoop
          
          docker build -t $IMAGE_NAME:${GITHUB_SHA} . 
          docker tag $IMAGE_NAME:${GITHUB_SHA} $IMAGE_NAME:latest
          
          docker push $IMAGE_NAME:${GITHUB_SHA}
          docker push $IMAGE_NAME:latest

  # ==================================
  # CD: Deploy to Test Environment
  # ==================================
  cd-test:
    runs-on: ubuntu-latest
    needs: ci  # CI가 성공한 후에만 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Test Environment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |

            # GHCR 로그인 (EC2)
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{github.repository_owner}} --password-stdin

            # 최신 이미지 pull
            docker pull ghcr.io/${{ github.repository_owner }}/zoopzoop:latest

            # Blue-Green 배포
            if [ "$(docker ps -q -f name=zoopzoop-blue)" ]; then
              NEW_CONTAINER=zoopzoop-green
              OLD_CONTAINER=zoopzoop-blue
              PORT=8081
            else
              NEW_CONTAINER=zoopzoop-blue
              OLD_CONTAINER=zoopzoop-green
              PORT=8080
            fi

            echo "Starting new container: $NEW_CONTAINER on port $PORT"
            docker run -d --restart unless-stopped \
              -p $PORT:8080 \
              --name $NEW_CONTAINER \
              --network common \
              -e SPRING_DATASOURCE_URL=${{secrets.TEST_DB_URL}} \
              -e SPRING_DATASOURCE_USERNAME=${{secrets.TEST_DB_USERNAME}} \
                -e SPRING_DATASOURCE_PASSWORD=${{secrets.TEST_DB_PASSWORD}} \
              ghcr.io/${{ github.repository_owner }}/zoopzoop:latest
            
            
            # 헬스체크 (Spring Boot Actuator)
            for i in {1..30}; do
              if curl -s http://localhost:$PORT/actuator/health | grep -q '"status":"UP"'; then
                echo "New container is healthy!"
                break
              else
                echo "Waiting for new container to be healthy..."
                sleep 5
              fi
            done

            # 이전 컨테이너 종료 및 제거
            echo "Stopping old container: $OLD_CONTAINER"
            docker stop $OLD_CONTAINER || true
            docker rm $OLD_CONTAINER || true