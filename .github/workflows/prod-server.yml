# ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïù¥Î¶Ñ
name: Spring CD (Production)

# main Î∏åÎûúÏπò PRÏóêÏÑúÎßå Ïã§Ìñâ (Ïù¥ÎØ∏ ÎπåÎìúÎêú Docker Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©)
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'build.gradle*'
      - 'settings.gradle*'
      - 'gradle/**'
      - 'Dockerfile'
      - '.github/workflows/**'

jobs:
  # ==================================
  # CD: Deploy to Production Environment
  # ==================================
  cd-prod:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production Environment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            
            # GHCR Î°úÍ∑∏Ïù∏ (EC2)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{github.repository_owner}}" --password-stdin
            
            # ÏµúÏã† Ïù¥ÎØ∏ÏßÄ pull
            docker pull ghcr.io/${{ github.repository }}/zoopzoop:latest
            
            # .env ÌååÏùº ÏÉùÏÑ±
            cat << EOF > .env
            # DB
            SPRING_DATASOURCE_URL=${{secrets.PROD_DB_URL}}
            SPRING_DATASOURCE_USERNAME=${{secrets.PROD_DB_USERNAME}}
            SPRING_DATASOURCE_PASSWORD=${{secrets.PROD_DB_PASSWORD}}
            
            # RabbitMQ
            SPRING_RABBITMQ_HOST=${{secrets.PROD_RABBITMQ_HOST}}
            SPRING_RABBITMQ_USERNAME=${{secrets.PROD_RABBITMQ_USERNAME}}
            SPRING_RABBITMQ_PASSWORD=${{secrets.PROD_RABBITMQ_PASSWORD}}
            
            # Kakao OAuth
            OAUTH_KAKAO_CLIENT_ID=${{secrets.OAUTH_KAKAO_CLIENT_ID}}
            OAUTH_KAKAO_CLIENT_SECRET=${{secrets.OAUTH_KAKAO_CLIENT_SECRET}}
            OAUTH_KAKAO_REDIRECT_URI=${{secrets.PROD_OAUTH_KAKAO_REDIRECT_URI}}
            
            # Google OAuth
            OAUTH_GOOGLE_CLIENT_ID=${{secrets.OAUTH_GOOGLE_CLIENT_ID}}
            OAUTH_GOOGLE_CLIENT_SECRET=${{secrets.OAUTH_GOOGLE_CLIENT_SECRET}}
            OAUTH_GOOGLE_REDIRECT_URI=${{secrets.PROD_OAUTH_GOOGLE_REDIRECT_URI}}
            
            # AWS
            AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
            AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}
            AWS_REGION=${{secrets.AWS_REGION}}
            AWS_S3_BUCKET_NAME=${{secrets.AWS_S3_BUCKET_NAME}}
            
            # Redis
            REDIS_HOST=${{secrets.REDIS_HOST}}
            REDIS_PORT=${{secrets.REDIS_PORT}}
            REDIS_PASSWORD=${{secrets.REDIS_PASSWORD}}
            
            # Naver API
            NAVER_CLIENT_ID=${{secrets.NAVER_CLIENT_ID}}
            NAVER_CLIENT_SECRET=${{secrets.NAVER_CLIENT_SECRET}}
            
            # JWT
            JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}}
            JWT_ACCESS_TOKEN_VALIDITY=${{secrets.JWT_ACCESS_TOKEN_VALIDITY}}
            JWT_REFRESH_TOKEN_VALIDITY=${{secrets.JWT_REFRESH_TOKEN_VALIDITY}}
            
            # Frontend Redirect
            FRONT_REDIRECT_DOMAIN=${{secrets.FRONT_REDIRECT_DOMAIN}}
            
            # Liveblocks
            LIVEBLOCKS_SECRET_KEY=${{secrets.LIVEBLOCKS_SECRET_KEY}}
            
            # Sentry
            SENTRY_DSN=${{secrets.SENTRY_DSN}}
            EOF
            
            # NPM API ÏÑ§Ï†ï
            NPM_HOST="localhost:81"
            NPM_EMAIL="${{secrets.NPM_ADMIN_EMAIL}}"
            NPM_PASSWORD="${{secrets.NPM_ADMIN_PASSWORD}}"
            PROXY_HOST_ID="${{secrets.NPM_PROXY_HOST_ID}}"
            
            # NPM API ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            echo "Getting NPM API token..."
            TOKEN=$(curl -s -X POST "http://${NPM_HOST}/api/tokens" \
              -H "Content-Type: application/json" \
              -d "{\"identity\":\"${NPM_EMAIL}\",\"secret\":\"${NPM_PASSWORD}\"}" | \
              jq -r '.token')
            if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
              echo "‚ùå Failed to get NPM API token"
              exit 1
            fi
            
            # ÌòÑÏû¨ NPM Proxy Host ÏÑ§Ï†ï ÌôïÏù∏
            echo "üìã Checking current NPM configuration... üìã"
            CURRENT_CONFIG=$(curl -s -H "Authorization: Bearer $TOKEN" \
              "http://${NPM_HOST}/api/nginx/proxy-hosts/${PROXY_HOST_ID}")
            
            CURRENT_TARGET=$(echo $CURRENT_CONFIG | jq -r '.[0].forward_host // .forward_host')
            CURRENT_PORT=$(echo $CURRENT_CONFIG | jq -r '.[0].forward_port // .forward_port')
            
            echo "Current NPM target: $CURRENT_TARGET:$CURRENT_PORT"
            
            # Blue-Green Î∞∞Ìè¨
            if [ "$(docker ps -q -f name=zoopzoop-blue)" ]; then
              NEW_CONTAINER=zoopzoop-green
              OLD_CONTAINER=zoopzoop-blue
              NEW_PORT=8082
            else
              NEW_CONTAINER=zoopzoop-blue
              OLD_CONTAINER=zoopzoop-green
              NEW_PORT=8081
            fi
            
            # Ïä§ÌÅ¨Î¶ΩÌä∏ Ï¢ÖÎ£å Ïãú .env ÌååÏùº ÏûêÎèô ÏÇ≠Ï†ú
            trap 'rm -f .env' EXIT
            
            echo "Starting new container: $NEW_CONTAINER on port $NEW_PORT"
            docker run -d --restart unless-stopped \
              -p $NEW_PORT:8080 \
              --name $NEW_CONTAINER \
              --network common \
              --env-file .env \
              ghcr.io/${{ github.repository }}/zoopzoop:latest
            
            
            # Ìó¨Ïä§Ï≤¥ÌÅ¨ (Spring Boot Actuator)
            for i in {1..30}; do
              if curl -s http://localhost:$NEW_PORT/actuator/health | grep -q '"status":"UP"'; then
                echo "‚úÖNew container is healthy!"
                break
              else
                echo "Waiting for new container to be healthy..."
                sleep 5
              fi
            
            if [ $i -eq 30 ]; then
                echo "‚ùå Health check failed. Rolling back..."
                docker stop $NEW_CONTAINER || true
                docker rm $NEW_CONTAINER || true
                exit 1 
              fi
            done
            
            # NPMÏóêÏÑú Ìä∏ÎûòÌîΩ Ïä§ÏúÑÏπ≠
            echo "üîÑ Switching traffic in Nginx Proxy Manager..."
            DOMAIN_NAME=$(echo $CURRENT_CONFIG | jq -r '.domain_names[0]')
            CERT_ID=$(echo "$CURRENT_CONFIG" | jq -r '.certificate_id')
            
            SWITCH_RESPONSE=$(curl -s -w "%{http_code}" -X PUT "http://${NPM_HOST}/api/nginx/proxy-hosts/${PROXY_HOST_ID}" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"domain_names\": [\"$DOMAIN_NAME\"],
                \"forward_scheme\": \"http\",
                \"forward_host\": \"$NEW_CONTAINER\",
                \"forward_port\": 8080,
                \"caching_enabled\": false,
                \"block_exploits\": true,
                \"advanced_config\": \"\",
                \"locations\": [],
                \"certificate_id\": $CERT_ID,
                \"ssl_forced\": 1,
                \"hsts_enabled\": 1,
                \"hsts_subdomains\": 1
              }")
            
            HTTP_CODE=${SWITCH_RESPONSE: -3}
            if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
              echo "‚úÖ Traffic switching completed successfully!"
              echo "üéØ NPM now points to: $NEW_CONTAINER:8080"
            
              # ÏµúÏ¢Ö ÌôïÏù∏
              sleep 5
              echo "üîç Final verification..."
              VERIFY_CONFIG=$(curl -s -H "Authorization: Bearer $TOKEN" \
                "http://${NPM_HOST}/api/nginx/proxy-hosts/${PROXY_HOST_ID}")
              VERIFY_TARGET=$(echo $VERIFY_CONFIG | jq -r '.forward_host')
              echo "‚úÖ Verified NPM target: $VERIFY_TARGET"
            
            else
              echo "‚ùå Traffic switching failed! HTTP Code: $HTTP_CODE"
              echo "Response: ${SWITCH_RESPONSE%???}"
              echo "üîÑ Rolling back new container..."
              docker stop $NEW_CONTAINER || true
              docker rm $NEW_CONTAINER || true
              exit 1
            fi
            
            # Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Ï¢ÖÎ£å Î∞è Ï†úÍ±∞
            echo "Stopping old container: $OLD_CONTAINER"
            docker stop $OLD_CONTAINER || true
            docker rm $OLD_CONTAINER || true